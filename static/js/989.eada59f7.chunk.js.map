{"version":3,"file":"static/js/989.eada59f7.chunk.js","mappings":"wQAqBA,EArBe,CACbA,KAAM,CACJA,KAAM,OACNC,KAAM,QACNC,YAAa,YACbC,MAAO,aAETC,MAAO,CACLJ,KAAM,QACNC,KAAM,QACNC,YAAa,aACbC,MAAO,cAETE,SAAU,CACRL,KAAM,WACNC,KAAM,WACNC,YAAa,gBACbC,MAAO,kBCXX,EANqB,CACnBH,KAAM,GACNI,MAAO,GACPC,SAAU,I,UCYZ,GAXuBC,EAAAA,EAAAA,IAAO,CAC5BN,MAAMO,EAAAA,EAAAA,MAASC,SAAS,gBACxBJ,OAAOG,EAAAA,EAAAA,IAAO,0BACXE,QALc,mCAKM,kBACpBD,SAAS,iBACZH,UAAUE,EAAAA,EAAAA,MACPG,IAAI,EAAG,wCACPC,IAAI,GAAI,0CACRH,SAAS,sB,UC4Cd,EAzCqB,WACnB,IAAMI,GAAWC,EAAAA,EAAAA,MAQTb,EAA0Bc,EAAAA,KAApBV,EAAoBU,EAAAA,MAAbT,EAAaS,EAAAA,SAElC,OACE,SAAC,KAAD,CACEC,cAAeC,EACfC,SAXa,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC1BP,GAASQ,EAAAA,EAAAA,IAAOF,IAEhBC,GACD,EAQGE,iBAAkBC,EAHpB,SAKG,gBAAGC,EAAH,EAAGA,OAAH,OACC,UAAC,IAAD,YACE,SAACC,EAAA,GAAD,kBACMxB,GADN,IAEEyB,YAAaF,EAAOvB,KAAO,UAAY,cAEzC,SAAC,KAAD,CAAc0B,UAAWC,EAAAA,EAAa3B,KAAMA,EAAKA,QACjD,SAACwB,EAAA,GAAD,kBACMpB,GADN,IAEEqB,YAAaF,EAAOnB,MAAQ,UAAY,cAE1C,SAAC,KAAD,CAAcsB,UAAWC,EAAAA,EAAa3B,KAAMI,EAAMJ,QAClD,SAACwB,EAAA,GAAD,kBACMnB,GADN,IAEEoB,YAAaF,EAAOlB,SAAW,UAAY,cAE7C,SAAC,KAAD,CAAcqB,UAAWC,EAAAA,EAAa3B,KAAMK,EAASL,QACrD,SAAC,IAAD,CAAQC,KAAK,SAAb,wBAjBH,GAsBN,E,6BCrCD,EAVqB,WACnB,OACE,SAAC,IAAD,CAAQ2B,MAAOA,EAAOC,OAAO,QAAQC,QAAQ,UAA7C,UACE,SAAC,IAAD,WACE,SAAC,EAAD,OAIP,C,qCCbKC,E,QAASC,EAAAA,IAAH,oPAMc,qBAAGJ,KAAH,IACL,qBAAGC,MAAH,IAEC,oBAAGC,QAAH,kBAAa,OAAb,KAMtB,K,sCCfMG,E,QAAWD,EAAAA,IAAH,uLAUd,K,sCCVML,E,QAAcK,EAAAA,EAAH,wJASjB,K,gFCRaE,GAAaF,E,QAAAA,GAAOG,EAAAA,GAAPH,CAAH,gQ,6ICAVI,GAAQJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,0SAQA,qBAAGP,WAAH,IAULa,EAAQN,EAAAA,EAAAA,MAAH,0F,sBCJlB,EAXkB,SAAC,GAAyB,IAAvB7B,EAAsB,EAAtBA,MAAUoC,GAAY,YACnCC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAEnC,OACE,UAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASC,QAAQ,MAAnD,WACE,SAACR,EAAD,CAAOS,QAASP,EAAhB,SAAqBrC,KACrB,SAACiC,GAAD,QAAOI,GAAIA,GAAQD,MAGxB,C","sources":["modules/RegisterForm/fields.js","modules/RegisterForm/intial-state.js","modules/RegisterForm/registerSchema.js","modules/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","shared/components/BgWrap/BgWrap.styled.jsx","shared/components/PageWrap/PageWrap.styled.jsx","shared/components/StyledError/StyledError.jsx","shared/components/StyledForm/StyledForm.styled.jsx","shared/components/TextField/TextField.styled.jsx","shared/components/TextField/TextField.jsx"],"sourcesContent":["const fields = {\n  name: {\n    name: 'name',\n    type: 'texts',\n    placeholder: 'User name',\n    label: 'User name',\n  },\n  email: {\n    name: 'email',\n    type: 'email',\n    placeholder: 'User email',\n    label: 'User email',\n  },\n  password: {\n    name: 'password',\n    type: 'password',\n    placeholder: 'User password',\n    label: 'User password',\n  },\n};\n\nexport default fields;\n","const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","import { object, string } from 'yup';\n\nconst emailRegex = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\n\nconst registerSchema = object({\n  name: string().required('Enter a name'),\n  email: string('Email must be a string')\n    .matches(emailRegex, 'Invalid format')\n    .required('Enter a email'),\n  password: string()\n    .min(7, 'Min name`s length - seven characters')\n    .max(16, 'Max name`s length - sixteen characters')\n    .required('Enter a password'),\n});\n\nexport default registerSchema;\n","import { Formik, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport { StyledForm } from 'shared/components/StyledForm/StyledForm.styled';\n\nimport TextField from 'shared/components/TextField/TextField';\nimport Button from 'shared/components/Button/Button.styled';\nimport StyledError from 'shared/components/StyledError/StyledError';\n\nimport { signup } from 'redux/auth/auth-operations';\n\nimport fields from './fields';\nimport initialState from './intial-state';\nimport registerSchema from './registerSchema';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, { resetForm }) => {\n    dispatch(signup(values));\n\n    resetForm();\n  };\n\n  const { name, email, password } = fields;\n\n  return (\n    <Formik\n      initialValues={initialState}\n      onSubmit={onSubmit}\n      validationSchema={registerSchema}\n    >\n      {({ errors }) => (\n        <StyledForm>\n          <TextField\n            {...name}\n            bordercolor={errors.name ? '#ff002b' : '#bec02a'}\n          />\n          <ErrorMessage component={StyledError} name={name.name} />\n          <TextField\n            {...email}\n            bordercolor={errors.email ? '#ff002b' : '#bec02a'}\n          />\n          <ErrorMessage component={StyledError} name={email.name} />\n          <TextField\n            {...password}\n            bordercolor={errors.password ? '#ff002b' : '#bec02a'}\n          />\n          <ErrorMessage component={StyledError} name={password.name} />\n          <Button type=\"submit\">Register</Button>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'modules/RegisterForm/RegisterForm';\n\nimport BgWrap from 'shared/components/BgWrap/BgWrap.styled';\nimport PageWrap from 'shared/components/PageWrap/PageWrap.styled';\n\nimport bgImg from 'shared/images/home-page-bg.jpg';\n\nconst RegisterPage = () => {\n  return (\n    <BgWrap bgImg={bgImg} bgSize=\"cover\" bgColor=\"#6b92a1\">\n      <PageWrap>\n        <RegisterForm />\n      </PageWrap>\n    </BgWrap>\n  );\n};\n\nexport default RegisterPage;\n","import styled from '@emotion/styled';\n\nconst BgWrap = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 100;\n\n  background-image: url(${({ bgImg }) => bgImg});\n  background-size: ${({ bgSize }) => bgSize};\n  background-repeat: no-repeat;\n  background-color: ${({ bgColor = '#fff' }) => bgColor};\n\n  width: 100%;\n  min-height: 800px;\n`;\n\nexport default BgWrap;\n","import styled from '@emotion/styled';\n\nconst PageWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  min-height: 800px;\n  padding: 100px 15px;\n`;\n\nexport default PageWrap;\n","import styled from '@emotion/styled';\n\nconst StyledError = styled.p`\n  font-size: 12px;\n  font-weight: bold;\n  display: flex;\n  align-self: flex-start;\n  margin-left: 20px;\n  color: #ff002b;\n`;\n\nexport default StyledError;\n","import { Form } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 25px;\n\n  width: 474px;\n  padding: 40px;\n  background-color: rgba(0, 0, 0, 0.9);\n  border-radius: 10px;\n\n  @media screen and (max-width: 474px) {\n    max-width: 350px;\n  }\n`;\n","import { Field } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const Input = styled(Field)`\n  width: 100%;\n  height: 40px;\n\n  padding-left: 20px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border: 1px solid;\n  border-color: ${({ bordercolor }) => bordercolor};\n  border-radius: 10px;\n  background-color: transparent;\n  color: #d3d3d3;\n\n  &::placeholder {\n    color: #d3d3d3;\n  }\n`;\n\nexport const Label = styled.label`\n  font-weight: bold;\n  color: #bec02a;\n\n  margin-bottom: 5px;\n`;\n","import { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\n\nimport Box from '../Box/Box';\nimport { Input, Label } from 'shared/components/TextField/TextField.styled';\n\nconst TextField = ({ label, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gridGap=\"2px\">\n      <Label htmlFor={id}>{label}</Label>\n      <Input id={id} {...props} />\n    </Box>\n  );\n};\n\nexport default TextField;\n"],"names":["name","type","placeholder","label","email","password","object","string","required","matches","min","max","dispatch","useDispatch","fields","initialValues","initialState","onSubmit","values","resetForm","signup","validationSchema","registerSchema","errors","TextField","bordercolor","component","StyledError","bgImg","bgSize","bgColor","BgWrap","styled","PageWrap","StyledForm","Form","Input","Field","Label","props","id","useMemo","nanoid","Box","display","flexDirection","gridGap","htmlFor"],"sourceRoot":""}