{"version":3,"file":"static/js/452.827e8619.chunk.js","mappings":"wOAiBA,EAjBe,CACbA,MAAO,CACLC,KAAM,QACNC,KAAM,QACNC,YAAa,aACbC,MAAO,aACPC,UAAU,GAEZC,SAAU,CACRL,KAAM,WACNC,KAAM,WACNC,YAAa,gBACbC,MAAO,gBACPC,UAAU,ICRd,EALqB,CACnBL,MAAO,GACPM,SAAU,I,oBCyCZ,EAjCkB,WAChB,OAA0CC,EAAAA,EAAAA,GAAQC,EAAcC,EAAAA,IAAxDC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,SAE7B,OACE,SAACC,EAAA,EAAD,CACED,SAAUA,EACVE,GAAG,OACHC,QAAQ,OACRC,eAAe,SACfC,GAAI,GALN,UAOE,UAACJ,EAAA,EAAD,CACEE,QAAQ,OACRG,QAAS,GACTC,cAAc,SACdC,WAAW,WAJb,WAME,SAACC,EAAA,GAAD,QACEV,aAAcA,EACdW,MAAOZ,EAAMV,OACTuB,EAAAA,SAEN,SAACF,EAAA,GAAD,QACEV,aAAcA,EACdW,MAAOZ,EAAMJ,UACTiB,EAAAA,YAEN,SAAC,IAAD,CAAQrB,KAAK,SAAb,uBAIP,ECnCD,EAJkB,WAChB,OAAO,SAAC,EAAD,GACR,C,6GCFYsB,E,QAAQC,EAAAA,MAAH,yI,6CCgBlB,EAXkB,SAAC,GAA8C,IAA5Cd,EAA2C,EAA3CA,aAAcW,EAA6B,EAA7BA,MAAOlB,EAAsB,EAAtBA,MAAUsB,GAAY,YACxDC,GAAKC,EAAAA,EAAAA,UAAQ,kBCWD,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDXOG,EAAN,GAAgB,IAEnC,OACE,UAACxB,EAAA,EAAD,CAAKE,QAAQ,OAAOG,QAAS,GAA7B,WACE,kBAAOoB,QAASX,EAAhB,SAAqBvB,KACrB,SAACoB,GAAD,QAAOe,SAAU5B,EAAcW,MAAOA,EAAOK,GAAIA,GAAQD,MAG9D,C,4EEOD,IApBgB,SAAClB,EAAcgC,GAC7B,OAA0BC,EAAAA,EAAAA,UAASjC,GAAnC,eAAOE,EAAP,KAAcgC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MAcjB,MAAO,CAAElC,MAAAA,EAAOgC,SAAAA,EAAU/B,aAZL,SAAC,GAAgB,IAAdkC,EAAa,EAAbA,OACtBH,GAAS,SAAAI,GAAS,yBAAUA,GAAV,cAAsBD,EAAO5C,KAAO4C,EAAOvB,OAA3C,GACnB,EAUuCV,SARvB,SAAAmC,GACfA,EAAEC,iBAEFL,EAASH,EAAU9B,IAEnBgC,EAASlC,EACV,EAGF,C","sources":["modules/LoginForm/fields.js","modules/LoginForm/intial-state.js","modules/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","shared/components/TextField/TextField.styled.jsx","shared/components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","shared/hooks/useForm.js"],"sourcesContent":["const fields = {\n  email: {\n    name: 'email',\n    type: 'email',\n    placeholder: 'User email',\n    label: 'User email',\n    required: true,\n  },\n  password: {\n    name: 'password',\n    type: 'password',\n    placeholder: 'User password',\n    label: 'User password',\n    required: true,\n  },\n};\n\nexport default fields;\n","const initialState = {\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","import Box from 'shared/components/Box/Box';\nimport useForm from 'shared/hooks/useForm';\n\nimport TextField from 'shared/components/TextField/TextField';\nimport Button from 'shared/components/Button/Button.styled';\n\nimport fields from './fields';\nimport initialState from './intial-state';\nimport { login } from 'redux/auth/auth-operations';\n\nconst LoginForm = () => {\n  const { state, handleChange, onSubmit } = useForm(initialState, login);\n\n  return (\n    <Box\n      onSubmit={onSubmit}\n      as=\"form\"\n      display=\"flex\"\n      justifyContent=\"center\"\n      pt={50}\n    >\n      <Box\n        display=\"flex\"\n        gridGap={10}\n        flexDirection=\"column\"\n        alignItems=\"flex-end\"\n      >\n        <TextField\n          handleChange={handleChange}\n          value={state.email}\n          {...fields.email}\n        />\n        <TextField\n          handleChange={handleChange}\n          value={state.password}\n          {...fields.password}\n        />\n        <Button type=\"submit\">Login</Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'modules/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  padding-left: 10px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  border: 1px solid;\n  border-radius: 4px;\n`;\n","import { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '../Box/Box';\nimport { Input } from 'shared/components/TextField/TextField.styled';\n\nconst TextField = ({ handleChange, value, label, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <Box display=\"flex\" gridGap={10}>\n      <label htmlFor={id}>{label}</label>\n      <Input onChange={handleChange} value={value} id={id} {...props} />\n    </Box>\n  );\n};\n\nexport default TextField;\n\nTextField.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string,\n  required: PropTypes.bool,\n  title: PropTypes.string,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useForm = (initialState, operation) => {\n  const [state, setState] = useState(initialState);\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    setState(prevState => ({ ...prevState, [target.name]: target.value }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    dispatch(operation(state));\n\n    setState(initialState);\n  };\n\n  return { state, setState, handleChange, onSubmit };\n};\n\nexport default useForm;\n"],"names":["email","name","type","placeholder","label","required","password","useForm","initialState","login","state","handleChange","onSubmit","Box","as","display","justifyContent","pt","gridGap","flexDirection","alignItems","TextField","value","fields","Input","styled","props","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","onChange","operation","useState","setState","dispatch","useDispatch","target","prevState","e","preventDefault"],"sourceRoot":""}